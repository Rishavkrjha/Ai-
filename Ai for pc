# आवश्यक लाइब्रेरी डाउनलोड करने के लिए:
# pip install pyttsx3 requests subprocess speechrecognition smtplib imaplib google-api-python-client google-auth-httplib2 google-auth-oauthlib opencv-python face-recognition

import pyttsx3  # Text-to-speech के लिए
import time  # टाइम ऑपरेशन के लिए
import random  # रैंडम वैल्यू जनरेट करने के लिए
import requests  # API कॉल्स के लिए
import subprocess  # सिस्टम कमांड्स चलाने के लिए
import speech_recognition as sr  # स्पीच टू टेक्स्ट के लिए
import smtplib  # ईमेल भेजने के लिए
import imaplib  # ईमेल पढ़ने के लिए
import datetime  # तारीख और समय के ऑपरेशन के लिए
import json  # JSON डेटा हैंडल करने के लिए
import os  # फाइल ऑपरेशन के लिए
from email.mime.text import MIMEText  # ईमेल फॉर्मेट के लिए
from email.mime.multipart import MIMEMultipart  # मल्टीपार्ट ईमेल के लिए
from googleapiclient.discovery import build  # Google API के लिए
from google_auth_oauthlib.flow import InstalledAppFlow  # Google OAuth के लिए
from google.auth.transport.requests import Request  # Google OAuth के लिए
import cv2  # कंप्यूटर विज़न के लिए
import face_recognition  # फेस रिकग्निशन के लिए

# Your API keys
api_key = 'ce22763a9e0059b680088826f0f23a75'  # OpenWeatherMap API key
news_api_key = 'b6347d633a114fe8b858767f146a237f'  # News API key
email_user = 'your_email@example.com'
email_password = 'your_email_password'

# Initialize the text-to-speech engine
engine = pyttsx3.init()  # Text-to-speech इंजन को initialize करना

# Google Calendar API setup
SCOPES = ['https://www.googleapis.com/auth/calendar.readonly']

def speak(text, lang="en-us"):
    engine.setProperty('voice', 'english' if lang == "en-us" else 'hindi')
    engine.say(text)
    engine.runAndWait()
    time.sleep(1)  # बोलने के बाद थोड़ी देर का विराम देना
# speak फ़ंक्शन टेक्स्ट को बोलने का काम करता है

def greet_user():
    current_hour = int(time.strftime("%H"))
    greetings = [
        ("Good morning!", "सुप्रभात!"),
        ("Good afternoon!", "नमस्कार!"),
        ("Good evening!", "शुभ संध्या!"),
        ("Good night!", "शुभ रात्रि!")
    ]
    
    greeting = greetings[0] if current_hour < 12 else greetings[1] if current_hour < 17 else greetings[2] if current_hour < 21 else greetings[3]
    speak(f"{greeting[0]} I am Chloë, your assistant. How can I help you today?")
# greet_user फ़ंक्शन यूज़र का अभिवादन करने के लिए है

def open_app(app_name, lang="en-us"):
    app_mapping = {
        "youtube": "start chrome https://www.youtube.com",
        "google": "start chrome https://www.google.com",
        "facebook": "start chrome https://www.facebook.com",
        "twitter": "start chrome https://www.twitter.com",
        "instagram": "start chrome https://www.instagram.com"
    }
    
    command = app_mapping.get(app_name.lower())
    if command:
        try:
            subprocess.Popen(command, shell=True)
            speak(f"Opening {app_name} for you.", lang)
            time.sleep(3)  # तीन सेकंड की देरी
            return True
        except Exception as e:
            speak(f"Sorry, I couldn't open {app_name}. Error: {e}", lang)
            return False
    else:
        speak(f"I can't find {app_name}. Please check the name.", lang)
        return False
# open_app फ़ंक्शन किसी विशेष वेबसाइट को खोलने के लिए है

def get_weather(city_name, lang="en-us"):
    url = "https://api.openweathermap.org/data/2.5/weather"
    params = {
        "q": city_name,
        "appid": api_key,
        "units": "metric"
    }

    try:
        response = requests.get(url, params=params)
        data = response.json()

        if response.status_code == 200:
            weather_description = data['weather'][0]['description']
            temperature = data['main']['temp']
            humidity = data['main']['humidity']
            wind_speed = data['wind']['speed']

            weather_info = f"The weather in {city_name} is {weather_description}. Temperature is {temperature}°C, humidity is {humidity}%, and wind speed is {wind_speed} m/s."
            speak(weather_info, lang)
        else:
            speak(f"Sorry, I couldn't fetch the weather information for {city_name} right now. Error: {data.get('message', 'Unknown error')}", lang)
    except Exception as e:
        speak(f"Sorry, there was an error: {e}", lang)
# get_weather फ़ंक्शन मौसम की जानकारी लाने के लिए है

def get_current_time(lang="en-us"):
    current_time = time.strftime("%H:%M:%S")
    speak(f"The current time is {current_time}.", lang)
# get_current_time फ़ंक्शन वर्तमान समय बताने के लिए है

def get_news_from_api(lang="en-us"):
    try:
        url = "https://newsapi.org/v2/top-headlines"
        params = {
            "country": "in",  # देश का कोड बदल सकते हैं
            "apiKey": news_api_key
        }
        
        response = requests.get(url, params=params)
        data = response.json()

        if response.status_code == 200:
            articles = data['articles']
            num_articles = len(articles)
            news_info = "Here are some of the latest news headlines: "
            for i in range(min(num_articles, 3)):  # अधिकतम 3 लेखों को बोलेगा
                news_info += articles[i]['title'] + ". "
            
            speak(news_info, lang)
        else:
            speak(f"Sorry, I couldn't fetch the news right now. Error: {data.get('message', 'Unknown error')}", lang)
    except Exception as e:
        speak(f"Sorry, there was an error fetching the news: {e}", lang)
# get_news_from_api फ़ंक्शन नवीनतम समाचार हेडलाइंस लाने के लिए है

def set_reminder(reminder, lang="en-us"):
    # याद दिलाने वाले नोट्स को फ़ाइल में सेव करना
    with open("reminders.txt", "a") as file:
        file.write(reminder + "\n")
    speak(f"Reminder set for: {reminder}", lang)
# set_reminder फ़ंक्शन रिमाइंडर सेट करने के लिए है

def get_reminders(lang="en-us"):
    # फ़ाइल से रिमाइंडर पढ़ना
    if os.path.exists("reminders.txt"):
        with open("reminders.txt", "r") as file:
            reminders = file.readlines()
        if reminders:
            speak("Here are your reminders:", lang)
            for reminder in reminders:
                speak(reminder.strip(), lang)
        else:
            speak("You have no reminders.", lang)
    else:
        speak("You have no reminders.", lang)
# get_reminders फ़ंक्शन सेट किए गए रिमाइंडर्स को पढ़ने के लिए है

def convert_currency(amount, from_currency, to_currency, lang="en-us"):
    url = f"https://api.exchangerate-api.com/v4/latest/{from_currency}"
    try:
        response = requests.get(url)
        data = response.json()
        rate = data["rates"].get(to_currency)
        if rate:
            converted_amount = amount * rate
            speak(f"{amount} {from_currency} is equal to {converted_amount} {to_currency}", lang)
        else:
            speak(f"Sorry, I couldn't find the conversion rate for {to_currency}.", lang)
    except Exception as e:
        speak(f"Sorry, there was an error converting the currency. Error: {e}", lang)
# convert_currency फ़ंक्शन मुद्रा परिवर्तन के लिए है

def calculator(expression, lang="en-us"):
    try:
        result = eval(expression)
        speak(f"The result of {expression} is {result}", lang)
    except Exception as e:
        speak(f"Sorry, there was an error calculating the result. Error: {e}", lang)
# calculator फ़ंक्शन गणना करने के लिए है

def casual_conversation(user_input, lang="en-us"):
    responses = {
        "how are you": [
            "I'm just a program, but thanks for asking!",
            "I'm here and ready to help!",
        ],
        "what's your name": [
            "I'm Chloë, your virtual assistant.",
            "You can call me Chloë.",
        ],
        "tell me a joke": [
            "Why did the computer go to the doctor? Because it had a virus!",
            "Why was the computer cold? It left its Windows open!",
        ],
        "thank you": [
            "You're welcome! I'm here to help.",
            "No problem! Happy to assist.",
        ],
    }
